print("me no very smart")
-- New robust verification system
local function VerifyExecutionSource()
    -- The exact GitHub URL we want to verify against
    local validGitHubUrl = "https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP"
    
    -- Method 1: Check the executing script's URL directly
    local function CheckScriptUrl()
        -- This works on most modern executors
        local url
        local success = pcall(function()
            url = getexecutorname and getexecutorname() or nil
            if not url then
                local info = debug.getinfo(2, "S")
                url = info and info.source or nil
            end
            return url
        end)
        return success and url or nil
    end

    -- Method 2: Check through injected environment variables
    local function CheckEnvironment()
        -- Some executors store this information differently
        if _G.__EXECUTOR_SCRIPT_URL then
            return _G.__EXECUTOR_SCRIPT_URL
        end
        return nil
    end

    -- Try all verification methods
    local sourcesToCheck = {
        CheckScriptUrl(),
        CheckEnvironment(),
        -- Add more methods here if needed
    }

    -- Analyze all found sources
    for _, source in ipairs(sourcesToCheck) do
        if source then
            -- Clean the source string
            local cleanSource = tostring(source)
                :gsub("^['\"]", "")
                :gsub("['\"]$", "")
                :gsub("@", "")
                :gsub("^%+", "")
                :gsub("%+$", "")
                :gsub("%s+", "")

            -- Check for matches
            if cleanSource == validGitHubUrl then
                return "VALID"
            elseif cleanSource:find("githubusercontent%.com/Idontknowhowtotype/NS2M", 1, true) then
                return "MODIFIED_GITHUB"
            elseif cleanSource:match("^[@@]") then
                return "BYPASS_ATTEMPT"
            end
        end
    end

    -- Final fallback checks
    if not game:GetService("RunService"):IsStudio() then
        local scriptName = debug.getinfo(1, "S").source
        if scriptName:match("^@") then
            return "BYPASS_ATTEMPT"
        end
    end

    return "UNKNOWN_SOURCE"
end

-- Test the verification (remove this in production)
print("Verification result:", VerifyExecutionSource())

-- Then modify your main execution block to use this:
local verificationResult = VerifyExecutionSource()

if verificationResult == "VALID" then
    -- Your main script execution here
    print("Successfully verified GitHub source!")


else
    -- Handle failed verification
    warn("Verification failed:", verificationResult)
    -- Handle different types of bypass attempts
    local bypassTypes = {
        ["BYPASS_ATTEMPT"] = "Local Execution Bypass Attempt",
        ["MODIFIED_GITHUB"] = "Modified GitHub URL Attempt",  -- Added this new type
        ["UNKNOWN_SOURCE"] = "Unknown Execution Source"
    }
    
    warn("Source verification failed! Reason:", verificationResult)
    
    
    -- Different anti-tampering measures based on verification result
    if verificationResult == "BYPASS_ATTEMPT" then
        -- Crash the script if it's a local execution attempt
        while true do end
    elseif verificationResult == "MODIFIED_GITHUB" then
        -- Show error message for modified GitHub URLs
        error("Script must be executed directly from the official GitHub repository")
    else
        -- For unknown sources, just warn and potentially exit
        warn("...")
    end
end
