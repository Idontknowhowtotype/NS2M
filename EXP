print("jicken chokey")
-- Strict but reliable source verification system
local function VerifyExecutionSource()
    -- The GitHub URL we want to verify against (raw.githubusercontent.com version)
    local validGitHubUrl = "https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP"
    
    -- Alternative URL pattern check (in case of URL encoding differences)
    local validUrlPattern = "githubusercontent%.com/Idontknowhowtotype/NS2M"
    
    -- Get the current script's source using multiple methods
    local currentScriptSource
    local verificationPassed = false
    
    -- Method 1: Check debug info (works in most executors)
    if debug and debug.getinfo then
        local success, info = pcall(function()
            return debug.getinfo(2, "S")
        end)
        
        if success and info and info.source then
            currentScriptSource = info.source
            print("[DEBUG] Source from debug.getinfo:", currentScriptSource)
            
            -- Check if it matches our GitHub URL
            if currentScriptSource == validGitHubUrl then
                verificationPassed = true
            elseif string.find(currentScriptSource, validUrlPattern) then
                -- Close but not exact match (might be URL encoded or slightly different)
                print("[WARNING] Similar but not exact GitHub URL detected")
            end
        end
    end
    
    -- Method 2: Check executor-specific source functions
    if not verificationPassed and getscriptsource then
        currentScriptSource = getscriptsource()
        print("[DEBUG] Source from getscriptsource:", currentScriptSource)
        
        if currentScriptSource == validGitHubUrl then
            verificationPassed = true
        end
    end
    
    -- Method 3: Check loadstring environment
    if not verificationPassed and getfenv then
        local env = getfenv(2)
        if env and env.script == nil then -- Indicates loadstring environment
            if debug and debug.getinfo then
                local info = debug.getinfo(2, "S")
                if info and info.source then
                    currentScriptSource = info.source
                    print("[DEBUG] Source from loadstring env:", currentScriptSource)
                    
                    if currentScriptSource == validGitHubUrl then
                        verificationPassed = true
                    end
                end
            end
        end
    end
    
    -- Final verification with relaxed checks if strict mode fails
    if not verificationPassed and currentScriptSource then
        -- Allow URL-encoded versions and slight variations
        local normalizedSource = currentScriptSource:gsub("%%(%x%x)", function(hex)
            return string.char(tonumber(hex, 16))
        end)
        
        if normalizedSource == validGitHubUrl or string.find(normalizedSource, validUrlPattern) then
            print("[INFO] Accepting normalized GitHub URL")
            verificationPassed = true
        end
    end
    
    -- Determine the result
    if verificationPassed then
        print("[SUCCESS] Source verification passed")
        return "VALID"
    elseif currentScriptSource and string.find(currentScriptSource:lower(), "github") then
        print("[WARNING] GitHub URL detected but doesn't match exactly")
        return "MODIFIED_GITHUB"
    elseif currentScriptSource and string.sub(currentScriptSource, 1, 1) == "@" then
        print("[WARNING] Local execution detected")
        return "BYPASS_ATTEMPT"
    else
        print("[ERROR] Could not verify source. Detected source:", currentScriptSource or "nil")
        return "UNKNOWN_SOURCE"
    end
end

-- Main verification check with better error handling
local function SafeVerify()
    local status, result = pcall(VerifyExecutionSource)
    if not status then
        print("[ERROR] Verification failed:", result)
        return "UNKNOWN_SOURCE"
    end
    return result
end

-- Run verification
local verificationResult = SafeVerify()

-- Handle the verification result
if verificationResult == "VALID" then
    -- Continue with normal execution
    print("Loading script...")
    -- [Rest of your script here]
    
else
    -- Create a detailed error message
    local errorMessages = {
        ["MODIFIED_GITHUB"] = "This script must be loaded directly from:\n"..
                              "https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP\n\n"..
                              "Do not modify the URL or use any redirects.",
        ["BYPASS_ATTEMPT"] = "Local execution blocked.\n\n"..
                             "This script must be loaded from GitHub using:\n"..
                             "loadstring(game:HttpGet('https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP'))()",
        ["UNKNOWN_SOURCE"] = "Could not verify script source.\n\n"..
                             "Possible reasons:\n"..
                             "1. Using an unsupported executor\n"..
                             "2. Network issues preventing verification\n"..
                             "3. Script was modified\n\n"..
                             "Please download the script directly from GitHub."
    }
    
    local errorMsg = errorMessages[verificationResult] or 
                    "An unknown error occurred during verification. (Code: "..tostring(verificationResult)..")"
    
    -- Show error message in a way that works across executors
    if rconsoleprint then
        rconsoleprint("@@RED@@")
        rconsoleprint("[SECURITY ERROR]\n")
        rconsoleprint("@@WHITE@@")
        rconsoleprint(errorMsg)
    else
        warn("[SECURITY ERROR] "..errorMsg)
    end
    
    -- Try to show a message box if possible
    pcall(function()
        if setclipboard then
            setclipboard("https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP")
        end
        
        if messagebox then
            messagebox(errorMsg, "Verification Failed", 0)
        end
    end)
    
    -- Stop execution
    while true do end
end
