-- Source verification system with strict GitHub URL check
local function VerifyExecutionSource()
    -- The exact GitHub URL we want to verify against
    local validGitHubUrl = "https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP"
    
    -- Get the current script's source
    local currentScriptSource
    local isFromCorrectGitHub = false
    local isNormalExecution = false
    local isModifiedGitHub = false
    
    -- Debug print to see what the executor is reporting as source
    print("[DEBUG] Attempting to get script source...")
    
    -- Try different methods to get script source
    local success, result = pcall(function()
        -- Method 1: Some executors provide this
        if getscriptsource then
            currentScriptSource = getscriptsource()
            print("[DEBUG] getscriptsource result:", currentScriptSource)
        -- Method 2: Debug library approach
        elseif debug and debug.getinfo then
            local info = debug.getinfo(2, "S")
            if info and info.source then
                currentScriptSource = info.source
                print("[DEBUG] debug.getinfo result:", currentScriptSource)
            end
        end
    end)
    
    if not success then
        print("[DEBUG] Failed to get script source:", result)
    end
    
    -- Check if we got any source info
    if currentScriptSource then
        print("[DEBUG] Raw source:", currentScriptSource)
        
        -- Clean the source string (remove quotes or other artifacts)
        local cleanedSource = currentScriptSource:gsub("['\"]", "")
        print("[DEBUG] Cleaned source:", cleanedSource)
        
        -- Strict check for the exact GitHub URL
        if cleanedSource == validGitHubUrl then
            print("[DEBUG] Exact GitHub URL match")
            isFromCorrectGitHub = true
        -- Check if it's a modified version of the GitHub URL
        elseif string.find(cleanedSource, "githubusercontent.com/Idontknowhowtotype/NS2M") then
            print("[DEBUG] Modified GitHub URL detected")
            isModifiedGitHub = true
        -- Check if it's from normal script execution (starts with @ for local scripts)
        elseif string.sub(currentScriptSource, 1, 1) == "@" then
            print("[DEBUG] Local execution detected")
            isNormalExecution = true
        else
            print("[DEBUG] Unknown source format")
        end
    else
        print("[DEBUG] No source information available")
    end
    
    -- Determine the result
    if isFromCorrectGitHub then
        print("[DEBUG] Verification result: VALID")
        return "VALID"
    elseif isModifiedGitHub then
        print("[DEBUG] Verification result: MODIFIED_GITHUB")
        return "MODIFIED_GITHUB"
    elseif isNormalExecution then
        print("[DEBUG] Verification result: BYPASS_ATTEMPT")
        return "BYPASS_ATTEMPT"
    else
        print("[DEBUG] Verification result: UNKNOWN_SOURCE")
        return "UNKNOWN_SOURCE"
    end
end
