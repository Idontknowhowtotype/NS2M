-- Strict source verification system with debug output
local function VerifyExecutionSource()
    print("[DEBUG] Starting source verification...")
    
    -- The GitHub URL we want to verify against
    local validGitHubUrl = "https://raw.githubusercontent.com/Idontknowhowtotype/NS2M/refs/heads/main/EXP"
    print("[DEBUG] Valid URL:", validGitHubUrl)
    
    -- Get the current script's source
    local currentScriptSource = "UNKNOWN"
    local isFromCorrectSource = false
    local isModifiedGitHub = false
    local isNormalExecution = false
    local debugInfo = {}

    -- Collect debug information about the environment
    debugInfo.executorName = identifyexecutor and identifyexecutor() or "Unknown"
    debugInfo.synAvailable = syn and true or false
    debugInfo.getfenvAvailable = getfenv and true or false
    debugInfo.debugAvailable = debug and debug.getinfo and true or false

    print("[DEBUG] Environment Info:")
    for k, v in pairs(debugInfo) do
        print("  "..k..":", v)
    end

    -- Try different methods to get script source
    print("\n[DEBUG] Attempting to get script source...")
    
    -- Method 1: Check debug info
    if debug and debug.getinfo then
        local success, info = pcall(function()
            return debug.getinfo(2, "S")
        end)
        
        if success and info and info.source then
            currentScriptSource = info.source
            print("[DEBUG] [Method 1] Got source from debug.getinfo:", currentScriptSource)
        else
            print("[DEBUG] [Method 1] Failed to get source from debug.getinfo")
        end
    end

    -- Method 2: Check getscriptsource if available
    if getscriptsource then
        currentScriptSource = getscriptsource()
        print("[DEBUG] [Method 2] Got source from getscriptsource:", currentScriptSource)
    else
        print("[DEBUG] [Method 2] getscriptsource not available")
    end

    -- Method 3: Check loadstring environment
    if getfenv then
        local env = getfenv(2)
        if env.script == nil then
            print("[DEBUG] [Method 3] Detected loadstring execution environment")
            if currentScriptSource == "UNKNOWN" and debug and debug.getinfo then
                local info = debug.getinfo(2, "S")
                if info and info.source then
                    currentScriptSource = info.source
                    print("[DEBUG] [Method 3] Loadstring source:", currentScriptSource)
                end
            end
        else
            print("[DEBUG] [Method 3] Standard execution environment")
        end
    else
        print("[DEBUG] [Method 3] getfenv not available")
    end

    print("\n[DEBUG] Final determined source:", currentScriptSource)

    -- Strict verification checks
    if currentScriptSource == validGitHubUrl then
        isFromCorrectSource = true
        print("[DEBUG] Source matches exactly - VALID")
    elseif string.find(currentScriptSource or "", "githubusercontent.com/Idontknowhowtotype/NS2M") then
        isModifiedGitHub = true
        print("[DEBUG] Source is modified GitHub URL")
    elseif string.sub(currentScriptSource or "", 1, 1) == "@" then
        isNormalExecution = true
        print("[DEBUG] Local script execution detected")
    else
        print("[DEBUG] Unknown source type")
    end

    -- Determine the result
    if isFromCorrectSource then
        print("[DEBUG] Verification result: VALID")
        return "VALID"
    elseif isModifiedGitHub then
        print("[DEBUG] Verification result: MODIFIED_GITHUB")
        return "MODIFIED_GITHUB"
    elseif isNormalExecution then
        print("[DEBUG] Verification result: BYPASS_ATTEMPT")
        return "BYPASS_ATTEMPT"
    else
        print("[DEBUG] Verification result: UNKNOWN_SOURCE")
        return "UNKNOWN_SOURCE"
    end
end

-- Main verification check with debug output
print("\n=== STARTING VERIFICATION ===")
local verificationResult = VerifyExecutionSource()
print("=== FINAL VERIFICATION RESULT ===", verificationResult, "\n")

-- Handle the verification result
if verificationResult == "VALID" then
    -- Continue with normal execution
    print("Loading script...")
    -- [Rest of your script here]
else
    -- Handle different types of bypass attempts
    warn("Source verification failed! Reason:", verificationResult)
    
    -- Different anti-tampering measures based on verification result
    if verificationResult == "BYPASS_ATTEMPT" then
        error("Script must be loaded from GitHub, not executed locally")
    elseif verificationResult == "MODIFIED_GITHUB" then
        error("Script must be executed directly from the official GitHub repository")
    else
        error("Unknown execution source - cannot verify script authenticity")
    end
end
